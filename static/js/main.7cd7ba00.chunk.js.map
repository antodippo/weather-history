{"version":3,"sources":["components/ResultsTable.js","components/SearchForm.js","App.js","reportWebVitals.js","index.js"],"names":["ResultsTable","props","className","weatherHistory","map","year","yearWeather","day","date","substring","minTemp","maxTemp","description","src","iconUrl","alt","_uniqueId","SearchForm","useState","enteredLocation","setEnteredLocation","Date","startDate","setStartDate","fetchedLocation","setFetchedLocation","addDays","days","result","setDate","getDate","fetchWeatherHandler","a","start","toISOString","end","currentYear","getFullYear","fetch","process","response","ok","error","json","jsonResponse","data","request","query","type","weather","mintempC","maxtempC","hourly","weatherDesc","value","weatherIconUrl","push","onSearch","onSubmit","event","preventDefault","required","onChange","target","onDayChange","App","setWeatherHistory","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","require","config","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7cd7ba00.chunk.js","sourcesContent":["import _uniqueId from \"lodash/uniqueId\";\n\nfunction ResultsTable(props) {\n  return (\n    <div className=\"flex flex-col mx-auto\">\n      {props.weatherHistory.map((year) => (\n        <div className=\"flex flex-row\" key={_uniqueId(\"year-\")}>\n          <div className=\"font-serif font-semibold text-xl p-3 align-middle\">{year.year}</div>\n          {year.yearWeather.map((day) => (\n            <div\n              className=\"bg-gray-100 rounded shadow-md h-50 min-h-50 w-32 min-w-0 m-1 text-xs text-center\"\n              key={_uniqueId(\"day-\")}\n            >\n              <div className=\"font-bold text-sm\">\n                {day.date.substring(8, 10)}/{day.date.substring(5, 7)}\n              </div>\n              <div>Min: {day.minTemp}°C</div>\n              <div>Max: {day.maxTemp}°C</div>\n              <div>{day.description}</div>\n              <img\n                className=\"rounded shadow-md mx-auto mt-0.5\"\n                src={day.iconUrl}\n                alt={day.description}\n              />\n            </div>\n          ))}\n        </div>\n      ))}\n    </div>\n  );\n}\n\nexport default ResultsTable;\n","import { useState } from \"react\";\nimport DayPickerInput from \"react-day-picker/DayPickerInput\";\nimport \"react-day-picker/lib/style.css\";\n\nfunction SearchForm(props) {\n  const [enteredLocation, setEnteredLocation] = useState(\"\");\n  const [startDate, setStartDate] = useState(new Date());\n  const [fetchedLocation, setFetchedLocation] = useState(\"\");\n\n  const locationChangeHandler = (event) => {\n    setEnteredLocation(event.target.value);\n  };\n\n  const dateChangeHandler = (date) => {\n    setStartDate(date);\n  };\n\n  function submitHandler(event) {\n    event.preventDefault();\n    return fetchWeatherHandler(enteredLocation);\n  }\n\n  function addDays(date, days) {\n    var result = new Date(date);\n    result.setDate(result.getDate() + days);\n    return result;\n  }\n\n  const fetchWeatherHandler = async (enteredLocation) => {\n    const start = addDays(startDate, -3).toISOString();\n    const end = addDays(startDate, 3).toISOString();\n    const currentYear = new Date().getFullYear();\n    const initialYear = currentYear - 5;\n    var weatherHistory = [];\n\n    for (let year = initialYear; year < currentYear; year++) {\n      const response = await fetch(\n        `https://api.worldweatheronline.com/premium/v1/past-weather.ashx` +\n          //TODO Put the key somewhere better\n          `?key=${process.env.REACT_APP_AUTH_TOKEN}` +\n          `&q=${enteredLocation}` +\n          `&date=${year}-${start.substring(5, 7)}-${start.substring(8, 10)}` +\n          `&enddate=${year}-${end.substring(5, 7)}-${end.substring(8, 10)}` +\n          `&format=json&tp=24`\n      );\n      if (!response.ok) {\n        setFetchedLocation(`Error: ${response.error}`);\n      }\n      try {\n        const jsonResponse = await response.json();\n        setFetchedLocation(\n          `Retrieved location: ${jsonResponse.data.request[0].query} (${jsonResponse.data.request[0].type})`\n        );\n\n        const yearWeather = jsonResponse.data.weather.map((result) => {\n          return {\n            date: result.date,\n            minTemp: result.mintempC,\n            maxTemp: result.maxtempC,\n            description: result.hourly[0].weatherDesc[0].value,\n            iconUrl: result.hourly[0].weatherIconUrl[0].value,\n          };\n        });\n\n        weatherHistory.push({ year: year, yearWeather: yearWeather });\n      } catch (error) {\n        setFetchedLocation(`Error retrieving weather or location`);\n      }\n    }\n\n    props.onSearch(weatherHistory);\n  };\n\n  return (\n    <div className=\"mx-auto max-w-max\">\n      <form onSubmit={submitHandler}>\n        <div className=\"flex flex-row mx-auto min-w-min mb-3\">\n          <div className=\"mr-1\">Location:</div>\n          <div className=\"mr-5\">\n            <input\n              className=\"border rounded shadow\"\n              type=\"text\"\n              required\n              value={enteredLocation}\n              onChange={locationChangeHandler}\n            />\n          </div>\n          <div className=\"mr-1\">Date:</div>\n          <div className=\"rounded shadow-md mr-5\">\n            <DayPickerInput onDayChange={dateChangeHandler} />\n          </div>\n          <div className=\"min-w-min\">\n            <button\n              type=\"submit\"\n              className=\"bg-gray-200 rounded shadow-md text-xs p-0.5 \"\n            >\n              Search\n            </button>\n          </div>\n        </div>\n      </form>\n      <div className=\"mb-5\">{fetchedLocation}</div>\n    </div>\n  );\n}\n\nexport default SearchForm;\n","import \"./App.css\";\nimport { useState } from \"react\";\nimport ResultsTable from \"./components/ResultsTable\";\nimport SearchForm from \"./components/SearchForm\";\n\nfunction App() {\n  const [weatherHistory, setWeatherHistory] = useState([]);\n\n  const searchHandler = (weatherHistory) => {\n    setWeatherHistory(weatherHistory);\n  }\n\n  return (\n    <div className=\"container mx-auto rounded shadow-xl bg-gray-200 mt-10 mb-10\">\n      <div className=\"mx-auto mb-5 mt-10\">\n        <div className=\"mx-auto w-3/4 font-serif font-semibold text-4xl mb-3\">Weather history</div>\n        <div className=\"mx-auto w-3/4\">\n        Try searching a location and a date, the system will retrieve what was the\n        weather like from 3 days before to 3 days after that date, in the last 5 years.\n        </div>\n      </div>\n      <SearchForm onSearch={searchHandler} />\n      <ResultsTable weatherHistory={weatherHistory} />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nrequire('dotenv').config();\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}